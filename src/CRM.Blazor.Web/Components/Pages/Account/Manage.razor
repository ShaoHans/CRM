@page "/account/manage"
@using Volo.Abp.Account
@using Volo.Abp.Account.Localization
@using Volo.Abp.AspNetCore.Components
@using Volo.Abp.Identity
@inject NotificationService NotificationService
@inject IProfileAppService ProfileAppService
@inherits AbpComponentBase

<RadzenTabs TabPosition="TabPosition.Left" RenderMode="TabRenderMode.Client">
    <Tabs>
        <RadzenTabsItem Text="@L["ProfileTab:Password"]">
            <RadzenTemplateForm TItem="ChangePasswordModel" Data=@ChangePasswordModel Submit=@ChangePasswordAsync>
                <RadzenStack Gap="2rem" class="rz-p-4 rz-p-md-12">
                    <RadzenRow AlignItems="AlignItems.Start" RowGap="0.25rem">
                        <RadzenColumn Size="12" SizeMD="4" class="rz-text-align-start rz-text-align-md-end">
                            <RadzenBadge Text="*" BadgeStyle="BadgeStyle.Danger" />
                            <RadzenLabel Text="@L["DisplayName:CurrentPassword"]" Component="@nameof(ChangePasswordModel.CurrentPassword)" />
                        </RadzenColumn>
                        <RadzenColumn Size="12" SizeMD="8">
                            <RadzenTextBox Name="@nameof(ChangePasswordModel.CurrentPassword)" @bind-Value=@ChangePasswordModel.CurrentPassword MaxLength="IdentityUserConsts.MaxPasswordLength" />
                            <RadzenRequiredValidator Component="@nameof(ChangePasswordModel.CurrentPassword)" Text="@L.Required("DisplayName:CurrentPassword")" Style="position: absolute" />
                        </RadzenColumn>
                    </RadzenRow>
                    <RadzenRow AlignItems="AlignItems.Start" RowGap="0.25rem">
                        <RadzenColumn Size="12" SizeMD="4" class="rz-text-align-start rz-text-align-md-end">
                            <RadzenBadge Text="*" BadgeStyle="BadgeStyle.Danger" />
                            <RadzenLabel Text="@L["DisplayName:NewPassword"]" Component="@nameof(ChangePasswordModel.NewPassword)" />
                        </RadzenColumn>
                        <RadzenColumn Size="12" SizeMD="8">
                            <RadzenTextBox Name="@nameof(ChangePasswordModel.NewPassword)" @bind-Value=@ChangePasswordModel.NewPassword MaxLength="IdentityUserConsts.MaxPasswordLength" />
                            <RadzenRequiredValidator Component="@nameof(ChangePasswordModel.NewPassword)" Text="@L.Required("DisplayName:NewPassword")" Style="position: absolute" />
                        </RadzenColumn>
                    </RadzenRow>
                    <RadzenRow AlignItems="AlignItems.Start" RowGap="0.25rem">
                        <RadzenColumn Size="12" SizeMD="4" class="rz-text-align-start rz-text-align-md-end">
                            <RadzenBadge Text="*" BadgeStyle="BadgeStyle.Danger" />
                            <RadzenLabel Text="@L["DisplayName:NewPasswordConfirm"]" Component="@nameof(ChangePasswordModel.NewPasswordConfirm)" />
                        </RadzenColumn>
                        <RadzenColumn Size="12" SizeMD="8">
                            <RadzenTextBox Name="@nameof(ChangePasswordModel.NewPasswordConfirm)" @bind-Value=@ChangePasswordModel.NewPasswordConfirm MaxLength="IdentityUserConsts.MaxPasswordLength" />
                            <RadzenRequiredValidator Component="@nameof(ChangePasswordModel.NewPasswordConfirm)" Text="@L.Required("DisplayName:NewPasswordConfirm")" Style="position: absolute" />
                        </RadzenColumn>
                    </RadzenRow>
                    <RadzenRow AlignItems="AlignItems.Start" RowGap="0.25rem">
                        <RadzenColumn Size="12" SizeMD="8">
                            <RadzenButton ButtonType="ButtonType.Submit" Icon="save" Text="@L["Save"]"></RadzenButton>
                        </RadzenColumn>
                    </RadzenRow>
                </RadzenStack>
            </RadzenTemplateForm>
        </RadzenTabsItem>
        <RadzenTabsItem Text="@L["ProfileTab:PersonalInfo"]">
            
        </RadzenTabsItem>
    </Tabs>
</RadzenTabs>

@code {
    ChangePasswordModel ChangePasswordModel = new();

    public Manage()
    {
        LocalizationResource = typeof(AccountResource);
    }

    async Task ChangePasswordAsync()
    {
        if (string.IsNullOrWhiteSpace(ChangePasswordModel.CurrentPassword))
        {
            return;
        }

        if (ChangePasswordModel.NewPassword != ChangePasswordModel.NewPasswordConfirm)
        {
            NotificationService.Error(L["NewPasswordConfirmFailed"]);
            return;
        }

        if (ChangePasswordModel.CurrentPassword == ChangePasswordModel.NewPassword)
        {
            NotificationService.Error(L["NewPasswordSameAsOld"]);
            return;
        }

        await ProfileAppService.ChangePasswordAsync(new ChangePasswordInput
            {
                CurrentPassword = ChangePasswordModel.CurrentPassword,
                NewPassword = ChangePasswordModel.NewPassword
            });

        NotificationService.Success(L["PasswordChanged"]);
    }
}
