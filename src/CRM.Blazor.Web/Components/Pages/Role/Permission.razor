@using Volo.Abp.AspNetCore.Components.Web.Configuration
@using Volo.Abp.PermissionManagement
@inject IPermissionAppService PermissionAppService
@inject ICurrentApplicationConfigurationCacheResetService CacheResetService
@inject NotificationService NotificationService
@inject DialogService DialogService

<RadzenTabs TabPosition="TabPosition.Left" RenderMode="TabRenderMode.Client">
    <Tabs>
        @foreach (var item in _groups)
        {
            <RadzenTabsItem Text="@item.DisplayName">
                <RadzenTree Style="width: 100%; height: 100%"
                            Data=@(_permissionTrees.Where(x=>x.GroupName==item.Name))>
                    <RadzenTreeLevel 
                        TextProperty="@nameof(PermissionTreeItemVm.DisplayName)"
                        ChildrenProperty="Children" 
                        Expanded="(i=>true)"
                        HasChildren="(i=>((PermissionTreeItemVm)i).Children.Count>0)">
                        <Template>
                            <RadzenCheckBox TValue="bool" 
                                @bind-Value="((PermissionTreeItemVm)context.Value).Permission.IsGranted" />
                            <b>@context.Text</b>
                        </Template>
                    </RadzenTreeLevel>
                </RadzenTree>
            </RadzenTabsItem>
        }
    </Tabs>
</RadzenTabs>

<RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center" Gap="0.5rem" class="rz-pt-4 rz-pb-8">
    <RadzenButton Icon="save" Click="SaveAsync">保存</RadzenButton>
</RadzenStack>

@code {
    [Parameter]
    public string ProviderName { get; set; } = default!;
    [Parameter]
    public string ProviderKey { get; set; } = default!;

    List<PermissionGroupDto> _groups = [];
    List<PermissionGrantInfoDto> _disabledPermissions = [];

    int _grantedPermissionCount = 0;
    int _notGrantedPermissionCount = 0;
    bool _selectAllDisabled;
    Dictionary<string, int> _permissionDepths = new Dictionary<string, int>();
    List<PermissionTreeItemVm> _permissionTrees = [];
    IEnumerable<object> _checkedValues = [];

    protected bool GrantAll
    {
        get
        {
            if (_notGrantedPermissionCount == 0)
            {
                return true;
            }

            return false;
        }
        set
        {
            if (_groups == null)
            {
                return;
            }

            _grantedPermissionCount = 0;
            _notGrantedPermissionCount = 0;

            foreach (var permission in _groups.SelectMany(x => x.Permissions))
            {
                if (!IsDisabledPermission(permission))
                {
                    permission.IsGranted = value;

                    if (value)
                    {
                        _grantedPermissionCount++;
                    }
                    else
                    {
                        _notGrantedPermissionCount++;
                    }
                }
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        var result = await PermissionAppService.GetAsync(ProviderName, ProviderKey);

        _groups = result.Groups;

        _selectAllDisabled = _groups.All(IsPermissionGroupDisabled);

        _grantedPermissionCount = 0;
        _notGrantedPermissionCount = 0;
        foreach (var permission in _groups.SelectMany(x => x.Permissions))
        {
            if (permission.IsGranted && permission.GrantedProviders.All(x => x.ProviderName != ProviderName))
            {
                _disabledPermissions.Add(permission);
                continue;
            }

            if (permission.IsGranted)
            {
                _grantedPermissionCount++;
            }
            else
            {
                _notGrantedPermissionCount++;
            }
        }

        foreach (var group in _groups)
        {
            _permissionTrees.AddRange(GenerateTree(group.Permissions, group.Name, null, 0));
        }
    }

    bool IsPermissionGroupDisabled(PermissionGroupDto group)
    {
        var permissions = group.Permissions;
        var grantedProviders = permissions.SelectMany(x => x.GrantedProviders);

        return permissions.All(x => x.IsGranted) && grantedProviders.Any(p => p.ProviderName != ProviderName);
    }

    List<PermissionTreeItemVm> GenerateTree(List<PermissionGrantInfoDto> allPermissions, string groupName, string? parentName, int depth)
    {
        var treeItems = new List<PermissionTreeItemVm>();
        var subPermissions = allPermissions.Where(p => p.ParentName == parentName);

        foreach (var item in subPermissions)
        {
            var treeItem = new PermissionTreeItemVm(depth, groupName, item, GenerateTree(allPermissions, groupName, item.Name, depth + 1));
            treeItems.Add(treeItem);
            if (treeItem.Permission.IsGranted)
            {
                _checkedValues = _checkedValues.Append(treeItem);
            }
        }
        return treeItems;
    }

    bool IsDisabledPermission(PermissionGrantInfoDto permissionGrantInfo)
    {
        return _disabledPermissions.Any(x => x == permissionGrantInfo);
    }

    void PermissionCheckChanged(bool isChecked)
    {

    }

    async Task SaveAsync()
    {
        try
        {
            var grantPermissions = new List<UpdatePermissionDto>();
            var checkedPermissions = _checkedValues.Select(x => ((PermissionTreeItemVm)x).Permission);
            foreach (var item in _groups.SelectMany(g => g.Permissions))
            {
                grantPermissions.Add(new UpdatePermissionDto
                {
                    IsGranted = checkedPermissions.Contains(item),
                    Name = item.Name
                });
            }
            var updateDto = new UpdatePermissionsDto
                {
                    Permissions = grantPermissions.ToArray()
                };

            if (!updateDto.Permissions.Any(x => x.IsGranted))
            {
                var result = await DialogService.Confirm("您确定要在没有任何权限的情况下保存吗？", "保存权限", 
                    new ConfirmOptions()
                        {
                            OkButtonText = "确定",
                            CancelButtonText = "取消"
                        });

                if (result == false)
                {
                    return;
                }
            }

            await PermissionAppService.UpdateAsync(ProviderName, ProviderKey, updateDto);
            await CacheResetService.ResetAsync();

            NotificationService.Success("保存成功");
        }
        catch (Exception ex)
        {
            NotificationService.Error(ex.Message);
        }
    }
}