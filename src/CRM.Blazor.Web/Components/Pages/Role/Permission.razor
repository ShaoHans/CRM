@using Volo.Abp.PermissionManagement
@inject IPermissionAppService PermissionAppService



<RadzenTabs TabPosition="TabPosition.Left" RenderMode="TabRenderMode.Client">
    <Tabs>
        @foreach (var item in _groups)
        {
            <RadzenTabsItem Text="@item.DisplayName">
                @* <RadzenTree AllowCheckBoxes="true" @bind-CheckedValues=@CheckedValues Style="width: 100%; height: 300px" Data=@categories
                            ItemRender="@TreeItemRender">
                    <RadzenTreeLevel TextProperty="@nameof(Category.CategoryName)" ChildrenProperty="Products" />
                    <RadzenTreeLevel TextProperty="@nameof(Product.ProductName)" HasChildren=@(product => false) />
                </RadzenTree> *@
            </RadzenTabsItem>
        }
    </Tabs>
</RadzenTabs>

@code {
    string entityDisplayName;
    string _providerName = "R";
    string _providerKey = "admin";

    string _entityDisplayName;

    List<PermissionGroupDto> _groups = [];
    List<PermissionGrantInfoDto> _disabledPermissions = [];

    int _grantedPermissionCount = 0;
    int _notGrantedPermissionCount = 0;
    bool _selectAllDisabled;
    Dictionary<string, int> _permissionDepths = new Dictionary<string, int>();
    protected string _selectedTabName;
    List<PermissionTreeItemVm> _permissionTrees = [];

    protected bool GrantAll
    {
        get
        {
            if (_notGrantedPermissionCount == 0)
            {
                return true;
            }

            return false;
        }
        set
        {
            if (_groups == null)
            {
                return;
            }

            _grantedPermissionCount = 0;
            _notGrantedPermissionCount = 0;

            foreach (var permission in _groups.SelectMany(x => x.Permissions))
            {
                if (!IsDisabledPermission(permission))
                {
                    permission.IsGranted = value;

                    if (value)
                    {
                        _grantedPermissionCount++;
                    }
                    else
                    {
                        _notGrantedPermissionCount++;
                    }
                }
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        var result = await PermissionAppService.GetAsync(_providerName, _providerKey);

        _entityDisplayName = entityDisplayName ?? result.EntityDisplayName;
        _groups = result.Groups;

        _selectAllDisabled = _groups.All(IsPermissionGroupDisabled);

        _grantedPermissionCount = 0;
        _notGrantedPermissionCount = 0;
        foreach (var permission in _groups.SelectMany(x => x.Permissions))
        {
            if (permission.IsGranted && permission.GrantedProviders.All(x => x.ProviderName != _providerName))
            {
                _disabledPermissions.Add(permission);
                continue;
            }

            if (permission.IsGranted)
            {
                _grantedPermissionCount++;
            }
            else
            {
                _notGrantedPermissionCount++;
            }
        }

        _selectedTabName = GetNormalizedGroupName(_groups.First().Name);

        foreach (var group in _groups)
        {
            SetPermissionDepths(group.Permissions, null, 0);
        }
    }

    string GetNormalizedGroupName(string name)
    {
        return "PermissionGroup_" + name.Replace(".", "_");
    }

    bool IsPermissionGroupDisabled(PermissionGroupDto group)
    {
        var permissions = group.Permissions;
        var grantedProviders = permissions.SelectMany(x => x.GrantedProviders);

        return permissions.All(x => x.IsGranted) && grantedProviders.Any(p => p.ProviderName != _providerName);
    }

    void SetPermissionDepths(List<PermissionGrantInfoDto> permissions, string? currentParent, int currentDepth)
    {
        foreach (var item in permissions)
        {
            if (item.ParentName == currentParent)
            {
                _permissionDepths[item.Name] = currentDepth;
                SetPermissionDepths(permissions, item.Name, currentDepth + 1);
            }
        }
    }

    void GenerateTree(List<PermissionGrantInfoDto> allPermissions, string? parentName, int depth)
    {
        var subPermissions = allPermissions.Where(p => p.ParentName == parentName);

        foreach (var item in subPermissions)
        {
            //_permissionTrees.Add(new PermissionTreeItemVm(depth, item, allPermissions.Where(p => p.ParentName == item.Name).ToList()));
        }
    }

    bool IsDisabledPermission(PermissionGrantInfoDto permissionGrantInfo)
    {
        return _disabledPermissions.Any(x => x == permissionGrantInfo);
    }

}