@using Microsoft.AspNetCore.Components.Authorization
@inherits ErrorBoundary
@inject ILogger<CustomErrorBoundary> Logger
@inject NotificationService NotificationService
@inject NavigationManager NavigationManager

@if (CurrentException is null)
{
    @ChildContent
}
else if (ErrorContent is not null)
{
    @ErrorContent(CurrentException)
}

@code {
    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }

    protected override async Task OnErrorAsync(Exception ex)
    {
        Logger.LogError(ex, "Server internal error");

        if (authenticationState is not null)
        {
            var authState = await authenticationState;
            var user = authState?.User;

            if (user?.Identity is null || !user.Identity.IsAuthenticated)
            {
                NavigationManager.NavigateTo("/login");
            }
            else
            {
                NotificationService.Error("Access Denied！");
            }
        }
        else
        {
            NotificationService.Error("服务器繁忙！");
        }
    }
}