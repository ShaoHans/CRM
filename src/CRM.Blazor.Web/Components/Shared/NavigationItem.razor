@inject NavigationManager navigationManager;
@if (!Menu.New && !Menu.Updated)
{
    <RadzenPanelMenuItem @bind-Expanded=@Expanded Text="@Menu.Name" Path="@GetUrl()" Icon="@Menu.Icon" aria-label="@Menu.Name">
        @ChildContent
    </RadzenPanelMenuItem>
}
else
{
    <RadzenPanelMenuItem @bind-Expanded=@Expanded Text="@Menu.Name" Path="@GetUrl()" Icon="@Menu.Icon" aria-label="@Menu.Name">
        <Template>
            @Menu.Name
            <RadzenBadge Text="Updated" Visible=@Menu.Updated BadgeStyle="BadgeStyle.Info"/>
            <RadzenBadge Text="New" Visible=@Menu.New BadgeStyle="BadgeStyle.Success"/>
        </Template>
        <ChildContent>@ChildContent</ChildContent>
    </RadzenPanelMenuItem>
}
@code {
    [Parameter]
    public Menu Menu { get; set; } = new();

    [Parameter]
    public RenderFragment ChildContent { get; set; } = default!;

    [Parameter]
    public bool Expanded
    {
        get
        {
            return Menu.Expanded;
        }
        set
        {
            Menu.Expanded = value;
        }
    }

    string? GetUrl()
    {
        return Menu.Path == null ? Menu.Path : $"{Menu.Path}{new Uri(navigationManager.Uri).Query}";
    }

    [Parameter]
    public EventCallback<bool> ExpandedChanged { get; set; }
}